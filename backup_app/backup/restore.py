import os
import shutil
from datetime import datetime
from backup_app.logs.logger import log_info, log_error

BACKUP_DIR = os.path.expanduser("~/Downloads/backups/")


def find_latest_backup(file_name):
    """–ò—â–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ –≤ ~/Downloads/backups/{–∏–º—è —Ñ–∞–π–ª–∞}/{–¥–∞—Ç–∞}/—Ñ–∞–π–ª."""
    file_backup_path = os.path.join(BACKUP_DIR, file_name)

    if not os.path.exists(file_backup_path) or not os.path.isdir(file_backup_path):
        log_error(f"‚ùå –ü–∞–ø–∫–∞ {file_backup_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è!")
        return None

    # üî• –¢–µ–ø–µ—Ä—å —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏, –∏—Å–∫–ª—é—á–∞—è —Ñ–∞–π–ª—ã
    backup_folders = sorted(
        [f for f in os.listdir(file_backup_path) if os.path.isdir(os.path.join(file_backup_path, f))],
        reverse=True
    )

    if not backup_folders:
        log_error(f"‚ùå –í –ø–∞–ø–∫–µ {file_backup_path} –Ω–µ—Ç –±—ç–∫–∞–ø–æ–≤!")
        return None

    for folder in backup_folders:
        backup_file = os.path.join(file_backup_path, folder, file_name)
        if os.path.isfile(backup_file):
            log_info(f"‚úÖ –ù–∞–π–¥–µ–Ω –±—ç–∫–∞–ø: {backup_file}")
            return backup_file

    log_error(f"‚ùå –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ~/Downloads/backups/{file_name}/.")
    return None


def find_all_backups(file_name):
    """–ù–∞—Ö–æ–¥–∏—Ç –í–°–ï –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞ –≤ ~/Downloads/backups/{–∏–º—è —Ñ–∞–π–ª–∞}/{–¥–∞—Ç–∞}/—Ñ–∞–π–ª."""
    file_backup_path = os.path.join(BACKUP_DIR, file_name)

    if not os.path.exists(file_backup_path) or not os.path.isdir(file_backup_path):
        log_error(f"‚ùå –ü–∞–ø–∫–∞ {file_backup_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return []

    # üî• –¢–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞–µ–º –í–°–ï –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞, –≤–∫–ª—é—á–∞—è –≤—Å–µ –ø–æ–¥–ø–∞–ø–∫–∏
    backup_versions = []
    for folder in sorted(os.listdir(file_backup_path), reverse=True):
        folder_path = os.path.join(file_backup_path, folder)
        if os.path.isdir(folder_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–∞–ø–∫–∞ —Å –¥–∞—Ç–æ–π
            backup_file = os.path.join(folder_path, file_name)
            if os.path.isfile(backup_file):
                backup_versions.append(backup_file)

    if not backup_versions:
        log_error(f"‚ùå –í –ø–∞–ø–∫–µ {file_backup_path} –Ω–µ—Ç –±—ç–∫–∞–ø–æ–≤!")
    return backup_versions


def restore_backup(file_name, restore_base_path):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞ –≤ ~/Downloads/Restore/{–∏–º—è —Ñ–∞–π–ª–∞}/{–¥–∞—Ç–∞}/—Ñ–∞–π–ª."""
    backup_file = find_latest_backup(file_name)

    if not backup_file:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è! –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ backups/")
        return False

    # üìÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    modified_time = os.path.getmtime(backup_file)
    formatted_date = datetime.fromtimestamp(modified_time).strftime("%Y-%m-%d_%H-%M-%S")

    # ‚úÖ –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ restore_base_path –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É
    if os.path.basename(restore_base_path).startswith("2025"):
        restore_base_path = os.path.dirname(restore_base_path)  # –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–æ—á–Ω—É—é –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å

    final_restore_path = os.path.join(restore_base_path, file_name, formatted_date)

    if os.path.exists(final_restore_path) and not os.path.isdir(final_restore_path):
        log_error(f"‚ùå –û—à–∏–±–∫–∞: {final_restore_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –Ω–µ –ø–∞–ø–∫–∞!")
        return False

    os.makedirs(final_restore_path, exist_ok=True)

    restored_file_path = os.path.join(final_restore_path, file_name)
    shutil.copy2(backup_file, restored_file_path)

    log_info(f"‚úÖ –§–∞–π–ª {file_name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {final_restore_path}")
    return restored_file_path


def restore_all_files(restore_base_path):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –í–°–ï –≤–µ—Ä—Å–∏–∏ –í–°–ï–• —Ñ–∞–π–ª–æ–≤ –∏–∑ ~/Downloads/backups/{–∏–º—è —Ñ–∞–π–ª–∞}/{–¥–∞—Ç–∞}/—Ñ–∞–π–ª."""
    if not os.path.exists(BACKUP_DIR):
        log_error(f"‚ùå –ü–∞–ø–∫–∞ {BACKUP_DIR} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return False

    restored_files = []

    file_folders = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]

    if not file_folders:
        log_error(f"‚ùå –í –ø–∞–ø–∫–µ ~/Downloads/backups/ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!")
        return False

    for file_name in file_folders:
        file_backup_path = os.path.join(BACKUP_DIR, file_name)

        if not os.path.isdir(file_backup_path):
            log_error(f"‚ö† –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {file_backup_path}, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –ø–∞–ø–∫–∞")
            continue

        all_versions = find_all_backups(file_name)

        for backup_file in all_versions:
            modified_time = os.path.getmtime(backup_file)
            formatted_date = datetime.fromtimestamp(modified_time).strftime("%Y-%m-%d_%H-%M-%S")

            # üî• –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            restore_path = os.path.join(restore_base_path, file_name, formatted_date)

            if os.path.exists(restore_path) and not os.path.isdir(restore_path):
                log_error(f"‚ùå –û—à–∏–±–∫–∞: {restore_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –Ω–µ –ø–∞–ø–∫–∞!")
                continue

            os.makedirs(restore_path, exist_ok=True)

            shutil.copy2(backup_file, os.path.join(restore_path, file_name))
            restored_files.append(os.path.join(restore_path, file_name))

    if restored_files:
        log_info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –í–°–ï —Ñ–∞–π–ª—ã: {restored_files}")
        return restored_files
    else:
        log_error(f"‚ùå –í –ø–∞–ø–∫–µ ~/Downloads/backups/ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!")
        return False
